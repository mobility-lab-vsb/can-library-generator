name: Release Python App

on:
  push:
    tags:
      - 'v*'

jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract
        run: |
          # Extracts the version number directly from the pushed Git tag.
          VERSION=$(git describe --tags --abbrev=0)
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-windows:
    runs-on: windows-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        shell: pwsh
        run: |
          # Replaces the __version__ string in __main__.py with the extracted tag version.
          (Get-Content src/canlibrarygenerator/__main__.py) -replace '__version__ = .*', '__version__ = "${{ env.APP_VERSION }}"' | Set-Content src/canlibrarygenerator/__main__.py

      - name: Inject version into pyproject.toml
        run: python src/canlibrarygenerator/scripts/inject_version.py ${{ env.APP_VERSION }}

      - name: Create and Build Windows app with Briefcase
        run: |
          briefcase create windows
          briefcase build windows

      - name: Install Inno Setup
        shell: pwsh
        run: choco install -y innosetup

      - name: Create dynamic installer.iss script
        shell: pwsh
        run: |
          # Generates ISS script with current version
          $issContent = @' 
          ; --- Inno Setup Script for Briefcase App ---
          [Setup]
          AppName=CANLibraryGenerator
          AppVersion=${{ env.APP_VERSION }}
          AppPublisher=MobilityLab
          DefaultDirName={autopf}\CANLibraryGenerator
          DefaultGroupName=CANLibraryGenerator
          OutputDir=dist
          OutputBaseFilename=CANLibraryGeneratorInstaller
          Compression=lzma
          SolidCompression=yes
          WizardStyle=modern
          UninstallDisplayIcon={app}\CANLibraryGenerator.exe
          PrivilegesRequired=admin
          DisableDirPage=no
          DisableProgramGroupPage=no
          
          [Tasks]
          Name: "desktopicon"; Description: "Create desktop shortcut"; GroupDescription: "Shortcuts:"
          Name: "startmenuicon"; Description: "Create Start menu shortcut"; GroupDescription: "Shortcuts:"; Flags: unchecked
          
          [Files]
          Source: "build\canlibrarygenerator\windows\app\src\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          Source: "build\canlibrarygenerator\windows\app\src\canlibrarygenerator.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\CANLibraryGenerator"; Filename: "{app}\CANLibraryGenerator.exe"; Tasks: startmenuicon
          Name: "{userdesktop}\CANLibraryGenerator"; Filename: "{app}\CANLibraryGenerator.exe"; Tasks: desktopicon
          Name: "{group}\Odinstalovat CANLibraryGenerator"; Filename: "{uninstallexe}"
          '@
          
          $issContent | Out-File installer.iss -Encoding UTF8

      - name: Compile Inno Setup installer
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe

  build-macos:
    runs-on: macos-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          # Replaces the __version__ string in __main__.py with the extracted tag version.
          sed -i '' "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" src/canlibrarygenerator/__main__.py

      - name: Inject version into pyproject.toml
        run: python src/canlibrarygenerator/scripts/inject_version.py ${{ env.APP_VERSION }}

      - name: Import Apple Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

      - name: Build macOS app with Briefcase
        run: |
          # Builds and packages the macOS application, using the imported developer ID for signing.
          briefcase create macOS
          briefcase build macOS
          briefcase package macOS -i "Developer ID Application: Josef Drozd (${{ secrets.APPLE_TEAM_ID }})" --no-notarize # Sign with Developer ID, notarization done in next step.

      - name: Notarize DMG with Apple
        run: |
          # Submits the DMG to Apple for notarization.
          DMG_PATH=$(find dist -name "*.dmg" | head -n 1)
          echo "Notarizing $DMG_PATH..."
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait # Waits for the notarization process to complete.

      - name: Staple the notarization ticket to DMG
        run: |
          # Attaches the notarization ticket to the DMG, allowing it to run on macOS.
          DMG_PATH=$(find dist -name "*.dmg" | head -n 1)
          echo "Stapling $DMG_PATH..."
          xcrun stapler staple "$DMG_PATH"

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdk-pixbuf2.0-0 libglib2.0-0 libxkbcommon-x11-0

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          # Replaces the __version__ string in __main__.py with the extracted tag version.
          sed -i "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" src/canlibrarygenerator/__main__.py

      - name: Inject version into pyproject.toml
        run: python src/canlibrarygenerator/scripts/inject_version.py ${{ env.APP_VERSION }}

      - name: Build Linux app with Briefcase
        run: |
          # Builds and packages the Linux application for release.
          briefcase create linux
          briefcase build linux
          briefcase package linux

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.deb