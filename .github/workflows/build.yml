name: Build, Run and Release Python App

on:
  push:
    tags:
      - 'v*'

jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-windows:
    runs-on: windows-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        shell: pwsh
        run: |
          (Get-Content src/canlibrarygenerator/__main__.py) -replace '__version__ = .*', '__version__ = "${{ env.APP_VERSION }}"' | Set-Content src/canlibrarygenerator/__main__.py

      - name: Build Windows app with Briefcase
        run: |
          briefcase create windows
          briefcase build windows
          briefcase package windows --adhoc-sign

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.msi

  build-macos:
    runs-on: macos-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          sed -i '' "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" src/canlibrarygenerator/__main__.py

      - name: Import Apple Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

      - name: Build macOS app with Briefcase
        run: |
          briefcase create macOS
          briefcase build macOS
          briefcase package macOS -i "Developer ID Application: Josef Drozd (${{ secrets.APPLE_TEAM_ID }})" --no-notarize

      - name: Notarize DMG with Apple
        run: |
          DMG_PATH=$(find dist -name "*.dmg" | head -n 1)
          echo "Notarizing $DMG_PATH..."
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait

      - name: Staple the notarization ticket to DMG
        run: |
          DMG_PATH=$(find dist -name "*.dmg" | head -n 1)
          echo "Stapling $DMG_PATH..."
          xcrun stapler staple "$DMG_PATH"

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdk-pixbuf2.0-0 libglib2.0-0 libxkbcommon-x11-0

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" src/canlibrarygenerator/__main__.py

      - name: Build Linux app with Briefcase
        run: |
          briefcase create linux
          briefcase build linux
          briefcase package linux

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.deb

  build-linux_arm64:
    runs-on: ubuntu-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Briefcase
        run: pip install briefcase

      - name: Inject version into __main__.py
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" src/canlibrarygenerator/__main__.py

      - name: Create Briefcase project structure
        run: briefcase create linux

      - name: Update Briefcase dependencies
        run: briefcase update linux --update-properties --update-dependencies --update-resources

      - name: Build ARM64 Linux App (Flatpak)
        run: briefcase build linux

      - name: Package ARM64 Linux App (Flatpak)
        run: briefcase package linux

      - name: Upload release asset (${{ matrix.arch }})
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.flatpak
        if: success()