name: Dev Build and Artifact Upload

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate_version.outputs.version }}
    steps:
      - name: Generate dev version
        id: generate_version
        run: |
          VERSION="dev-${{ github.ref_name }}-${{ github.run_number }}"
          echo "Generated dev version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-windows:
    runs-on: windows-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        shell: pwsh
        run: |
          # Replaces the __version__ string in __main__.py with the generated dev version.
          (Get-Content src/canlibrarygenerator/__main__.py) -replace '__version__ = .*', '__version__ = "${{ env.APP_VERSION }}"' | Set-Content src/canlibrarygenerator/__main__.py

      - name: Create and Build Windows app with Briefcase
        run: |
          briefcase create windows
          briefcase build windows

      - name: Install Inno Setup
        shell: pwsh
        run: choco install -y innosetup

      - name: Create dynamic installer.iss script
        shell: pwsh
        run: |
          $issContent = @' 
          ; --- Inno Setup Script for Briefcase App ---
          [Setup]
          AppName=CANLibraryGenerator
          AppVersion=${{ env.APP_VERSION }}
          AppPublisher=MobilityLab
          DefaultDirName={autopf}\CANLibraryGenerator
          DefaultGroupName=CANLibraryGenerator
          OutputDir=dist
          OutputBaseFilename=CANLibraryGeneratorInstaller
          Compression=lzma
          SolidCompression=yes
          WizardStyle=modern
          UninstallDisplayIcon={app}\CANLibraryGenerator.exe
          PrivilegesRequired=admin
          DisableDirPage=no
          DisableProgramGroupPage=no
          
          [Tasks]
          Name: "desktopicon"; Description: "Create desktop shortcut"; GroupDescription: "Shortcuts:"
          Name: "startmenuicon"; Description: "Create Start menu shortcut"; GroupDescription: "Shortcuts:"; Flags: unchecked
          
          [Files]
          Source: "build\canlibrarygenerator\windows\app\src\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          Source: "build\canlibrarygenerator\windows\app\src\canlibrarygenerator.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\CANLibraryGenerator"; Filename: "{app}\CANLibraryGenerator.exe"; Tasks: startmenuicon
          Name: "{userdesktop}\CANLibraryGenerator"; Filename: "{app}\CANLibraryGenerator.exe"; Tasks: desktopicon
          Name: "{group}\Odinstalovat CANLibraryGenerator"; Filename: "{uninstallexe}"
          '@
          
          $issContent | Out-File installer.iss -Encoding UTF8

      - name: Compile Inno Setup installer
        run: |
          "& C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss

      - name: Upload Windows app artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-canlibrarygenerator-${{ env.APP_VERSION }}
          path: dist/*.exe


  build-macos:
    runs-on: macos-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          # Replaces the __version__ string in __main__.py with the generated dev version.
          sed -i '' "s|^__version__ = .*|__version__ = \"${APP_VERSION}\"|" src/canlibrarygenerator/__main__.py

      - name: Build macOS app with Briefcase
        run: |
          # Builds and packages the macOS application. Ad-hoc signing is used for dev builds.
          briefcase create macOS
          briefcase build macOS
          briefcase package macOS --adhoc-sign

      - name: Upload macOS app artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-canlibrarygenerator-${{ env.APP_VERSION }}
          path: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdk-pixbuf2.0-0 libglib2.0-0 libxkbcommon-x11-0

      - name: Install Briefcase and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt

      - name: Inject version into __main__.py
        run: |
          # Replaces the __version__ string in __main__.py with the generated dev version.
          sed -i "s|^__version__ = .*|__version__ = \"${APP_VERSION}\"|" src/canlibrarygenerator/__main__.py

      - name: Build Linux app with Briefcase
        run: |
          briefcase create linux
          briefcase build linux
          briefcase package linux

      - name: Upload Linux app artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-canlibrarygenerator-${{ env.APP_VERSION }}
          path: dist/*.deb